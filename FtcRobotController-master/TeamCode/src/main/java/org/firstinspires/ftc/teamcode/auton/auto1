package org.firstinspires.ftc.teamcode.auton;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.teamcode.misc.PID;
import org.firstinspires.ftc.teamcode.roadrunner.drive.SampleMecanumDrive;
import org.firstinspires.ftc.teamcode.roadrunner.trajectorysequence.TrajectorySequence;
import org.firstinspires.ftc.teamcode.vision.AprilTags;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * This class represents an autonomous program for a robot that starts on the right side of the field
 * follows a path. It uses the Road Runner library for path following and
 * a PID (proportional-integral-derivative) controller for controlling the linear slide motors. The program
 * also utilizes a webcam for vision processing with the OpenCV library and the EasyOpenCV library.
 */

// WORK ON ONLY AFTER FINISHING "Left"
/* TODO:
- Adjust starting position - startPose variable
- Copy values from "Left"
- Adjust according to the needs (you will probably just need to flip some from negative to positive or positive to negative, and change rotation by 180)
- Don't forget to test parking
- After you are done don't forget blue side autonomous, again its probably just going to be flipping from negative to positive
FIXME:
- Write here whatever you need to be fixed that's not working, I will try to do my best and see whats the issue but do not rely on this.
 */

/*

------------- General tips & tricks -------------
1. Upload to GitHub everyday for me to see what's going on as well as if something goes wrong we can version control save it.
2. Use MeepMeep for coordinate and rotation system. Here is an attached picture https://ctrlv.link/yG1o of the grid, but if you need something more precise use MeepMeep (follow steps here https://github.com/NoahBres/MeepMeep)


------------- Get into FTC Dashboard instructions -------------
1. Connect to the bot wifi with the computer
2. Open browser and connect to this url - http://192.168.43.1:8080/dash
3. Top right click the "Default" and switch to "Field"
4. To start a program use the dropdown on the left side under "OpMode". Click on "INIT" to initialize and then press "START" to begin. To turn off press the "STOP"!

 */
@Autonomous(group = "Autonomous")
public class auto1 extends LinearOpMode {
    DcMotor leftFrontDrive = null;
    DcMotor leftBackDrive = null;
    DcMotor rightFrontDrive = null;
    DcMotor rightBackDrive = null;

    @Override public void runOpMode() throws InterruptedExeception {
        leftFrontDrive = HardwareMap.dcMotor.get("leftFrontDrive");
        leftBackDrive = HardwareMap.dcMotor.get("leftFrontDrive");
        rightFrontDrive = HardwareMap.dcMotor.get("leftFrontDrive");
        rightBackDrive = HardwareMap.dcMotor.get("leftFrontDrive");

        leftFrontDrive.setChannelMode(DcMotorController.RunMode.RUN_WITHOUT_ENCODERS);
        leftBackDrive.setChannelMode(DcMotorController.RunMode.RUN_WITHOUT_ENCODERS);
        rightFrontDrive.setChannelMode(DcMotorController.RunMode.RUN_WITHOUT_ENCODERS);
        rightBackDrive.setChannelMode(DcMotorController.RunMode.RUN_WITHOUT_ENCODERS);

        leftFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        rightFrontDrive.setDirection(DcMotor.Direction.FORWARD);
        rightBackDrive.setDirection(DcMotor.Direction.FORWARD);

        waitForStart();

        // drive forward *MAYBE*
//        leftFrontDrive.setPower(1);
//        leftBackDrive.setPower(1);
//        rightFrontDrive.setPower(1);
//        rightBackDrive.setPower(1);
//        Thread.sleep(2000);

        DriveForward(1);
        // stop *maybe*
//        leftFrontDrive.setPower(0);
//        leftBackDrive.setPower(0);
//        rightFrontDrive.setPower(0);
//        rightBackDrive.setPower(0);
        DriveForward(0);


    }
    public void DriveForward(double power) {
        leftFrontDrive.setPower(power);
        leftBackDrive.setPower(power);
        rightFrontDrive.setPower(power);
        rightBackDrive.setPower(power);
    }






        void telemetryUpdate(String message) {

            telemetry.update();
        }
    }